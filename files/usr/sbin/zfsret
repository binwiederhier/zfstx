#!/usr/bin/env bash

# The MIT License (MIT)

# Copyright (c) 2015 Philipp Heckel

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

usage() {
        echo "Usage: zfsret [OPTIONS] <local-fs> <keep>"
        echo "Destroy local ZFS snapshots for a specific filesystem."
        echo ""
        echo "Arguments:"
        echo "  <local-fs>               - Filesystem on local host, e.g. backuppool/myhost/home"
        echo "  <keep>                   - Number of snapshots to keep"
        echo ""
        echo "Options:"
        echo "  -n, --dry-run            - Don't apply changes, just print"
        echo ""
}

# Script begins here
if ! options=$(getopt -o n -l dry-run -- "$@") ; then
	echo "Invalid options."
	exit 1
fi

# Parse options
while [ $# -gt 0 ]
do
        case $1 in
                --dry-run | -n) dryrun="1" ;;
                (-*) echo "ERROR: $0 - unrecognized option $1" 1>&2; exit 1;;
                (*) break;;
        esac
        shift
done

local_fs=$1
keep=$2

# Check mandatory options
[ -z "$local_fs" -o -z "$keep" ] && { usage; exit 1; }

# Must run as root
if [ "$(id -u)" != "0" ]; then
        echo "Script must be run as root."
        exit 1
fi

local_list="$(zfs list -H -r -d 1 -t snapshot -o name -s creation "$local_fs")"
local_delete_list=$(echo "$local_list" | head -n-$keep)

if [ -n "$local_delete_list" ]; then
	echo "[$(date)] Destroying old local snapshots ..."

	echo "$local_delete_list" | while read snap; do
		if [ -z "$dryrun" ]; then
			echo "[$(date)] - $snap"
			zfs destroy "$snap"
		else
			echo "[$(date)] - This WOULD destroy $snap"
		fi
	done
else
	echo "[$(date)] No housekeeping to do."
fi


